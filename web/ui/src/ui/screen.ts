
const PALETTE = [
    [0x00, 0x00, 0x00], [0x00, 0x3D, 0xA6], [0x00, 0x12, 0xB0], [0x44, 0x00, 0x96], [0xA1, 0x00, 0x5E],
    [0xC7, 0x00, 0x28], [0xBA, 0x06, 0x00], [0x8C, 0x17, 0x00], [0x5C, 0x2F, 0x00], [0x10, 0x45, 0x00],
    [0x05, 0x4A, 0x00], [0x00, 0x47, 0x2E], [0x00, 0x41, 0x66], [0x00, 0x00, 0x00], [0x05, 0x05, 0x05],
    [0x05, 0x05, 0x05], [0xC7, 0xC7, 0xC7], [0x00, 0x77, 0xFF], [0x21, 0x55, 0xFF], [0x82, 0x37, 0xFA],
    [0xEB, 0x2F, 0xB5], [0xFF, 0x29, 0x50], [0xFF, 0x22, 0x00], [0xD6, 0x32, 0x00], [0xC4, 0x62, 0x00],
    [0x35, 0x80, 0x00], [0x05, 0x8F, 0x00], [0x00, 0x8A, 0x55], [0x00, 0x99, 0xCC], [0x21, 0x21, 0x21],
    [0x09, 0x09, 0x09], [0x09, 0x09, 0x09], [0xFF, 0xFF, 0xFF], [0x0F, 0xD7, 0xFF], [0x69, 0xA2, 0xFF],
    [0xD4, 0x80, 0xFF], [0xFF, 0x45, 0xF3], [0xFF, 0x61, 0x8B], [0xFF, 0x88, 0x33], [0xFF, 0x9C, 0x12],
    [0xFA, 0xBC, 0x20], [0x9F, 0xE3, 0x0E], [0x2B, 0xF0, 0x35], [0x0C, 0xF0, 0xA4], [0x05, 0xFB, 0xFF],
    [0x5E, 0x5E, 0x5E], [0x0D, 0x0D, 0x0D], [0x0D, 0x0D, 0x0D], [0xFF, 0xFF, 0xFF], [0xA6, 0xFC, 0xFF],
    [0xB3, 0xEC, 0xFF], [0xDA, 0xAB, 0xEB], [0xFF, 0xA8, 0xF9], [0xFF, 0xAB, 0xB3], [0xFF, 0xD2, 0xB0],
    [0xFF, 0xEF, 0xA6], [0xFF, 0xF7, 0x9C], [0xD7, 0xE8, 0x95], [0xA6, 0xED, 0xAF], [0xA2, 0xF2, 0xDA],
    [0x99, 0xFF, 0xFC], [0xDD, 0xDD, 0xDD], [0x11, 0x11, 0x11], [0x11, 0x11, 0x11],
];

const TILES_PER_ROW = 32;
const TILES_PER_COL = 30;

export type Tile = Uint8Array;
export type Screen = ReturnType<typeof createScreen>;

export const createScreen = (width: number, height: number) => {
    const tiles: Tile[] = [];
    const blankTile: Tile = new Uint8Array(64).fill(0x00);
    const background = new Uint8Array(width * height * 3).fill(0);
    let opacity = 0;

    for (let i = 0; i < TILES_PER_ROW * TILES_PER_COL; i += 1) {
        tiles.push(blankTile);
    }

    function setTile(x: number, y: number, tile: Tile): void {
        if (x >= 0 && x < TILES_PER_ROW && y >= 0 && y < TILES_PER_COL) {
            tiles[x + y * TILES_PER_ROW] = tile;
        }
    }

    function clearTile(x: number, y: number): void {
        setTile(x, y, blankTile);
    }

    function clear(): void {
        for (let i = 0; i < TILES_PER_ROW * TILES_PER_COL; i += 1) {
            tiles[i] = blankTile;
        }
    }

    function setBackground(data: Uint8Array, newOpacity = 0.2): void {
        background.set(data);
        opacity = newOpacity;
    }

    function mix(a: number, b: number): number {
        return Math.round(a * (1 - opacity) + b * opacity);
    }

    function render(buffer: Uint8Array): void {
        for (let y = 0; y < TILES_PER_COL; y += 1) {
            for (let x = 0; x < TILES_PER_ROW; x += 1) {
                const tile = tiles[x + y * TILES_PER_ROW];
                for (let j = 0; j < 8; j += 1) {
                    for (let i = 0; i < 8; i += 1) {
                        const colorIndex = tile[i + j * 8];
                        const color = PALETTE[colorIndex];
                        const index = (x * 8 + i + (y * 8 + j) * width) * 3;
                        buffer[index + 0] = mix(color[0], background[index + 0]);
                        buffer[index + 1] = mix(color[1], background[index + 1]);
                        buffer[index + 2] = mix(color[2], background[index + 2]);
                    }
                }
            }
        }
    }

    return {
        setTile,
        clearTile,
        clear,
        render,
        setBackground,
    };
};
